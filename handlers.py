import random
from datetime import datetime, timedelta

from telegram import Update
from telegram.ext import ContextTypes

import db
from config import COOLDOWN
from farms import FARM_TYPES


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = context.bot_data["db"]
    user_id = update.effective_user.id
    username = update.effective_user.username

    async with pool.acquire() as conn:
        user = await db.get_user(conn, user_id)
        if not user:
            await db.create_user(conn, user_id, username)

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ñ–µ—Ä–º—É! –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /shop, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Ñ–µ—Ä–º—É."
    )


async def farm_collect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = context.bot_data["db"]
    user_id = update.effective_user.id
    now = datetime.utcnow()

    async with pool.acquire() as conn:
        farms = await db.get_farms(conn, user_id)
        if not farms:
            await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–µ—Ä–º. –ö—É–ø–∏ –∏—Ö –≤ /shop.")
            return

        total_earned = 0
        messages = []

        for farm in farms:
            # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–µ—Ä–º—ã!
            if farm['farm_type'] not in ('–ü–æ–ª–µ', '–ö–æ—Ä–æ–≤—ã'):
                continue

            if farm['next_collect'] and farm['next_collect'] > now:
                continue  # –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–æ 24—á

            if farm['farm_type'] == '–ü–æ–ª–µ':
                coins = random.randint(15, 35) + (farm['level'] - 1) * 5
            elif farm['farm_type'] == '–ö–æ—Ä–æ–≤—ã':
                coins = random.randint(20, 30) + (farm['level'] - 1) * 5
            else:
                continue

            crit_chance = 0.10 + (farm['crit_level'] - 1) * 0.10
            if random.random() < crit_chance:
                coins *= 2
                messages.append(f"‚ú® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥ –æ—Ç {farm['farm_type']}!")

            total_earned += coins

            await conn.execute(
                "UPDATE user_farms SET next_collect = $1 WHERE id = $2",
                now + timedelta(seconds=86400), farm['id']
            )

        await db.update_balance(conn, user_id, total_earned)

        if total_earned > 0:
            await update.message.reply_text(
                f"–¢—ã —Å–æ–±—Ä–∞–ª {total_earned} –º–æ–Ω–µ—Ç! ü™ô\n" + "\n".join(messages)
            )
        else:
            await update.message.reply_text("–§–µ—Ä–º—ã –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤—ã –∫ —Å–±–æ—Ä—É.")


async def give_passive_income(app):
    pool = app.bot_data["db"]
    now = datetime.utcnow()

    async with pool.acquire() as conn:
        farms = await conn.fetch("""
            SELECT * FROM user_farms
            WHERE farm_type IN ('–ü–∞—Å–µ–∫–∞', '–ö—É—Ä—è—Ç–Ω–∏–∫')
        """)

        earnings = {}

        for farm in farms:
            last_paid = farm['last_paid']
            if last_paid and last_paid.date() == now.date():
                continue  # —É–∂–µ –ø–ª–∞—Ç–∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è

            if farm['farm_type'] == '–ü–∞—Å–µ–∫–∞':
                coins = random.randint(5, 20) + (farm['level'] - 1) * 5
            elif farm['farm_type'] == '–ö—É—Ä—è—Ç–Ω–∏–∫':
                coins = random.randint(7, 16) + (farm['level'] - 1) * 5
            else:
                continue

            crit_chance = 0.10 + (farm['crit_level'] - 1) * 0.10
            if random.random() < crit_chance:
                coins *= 2

            # –î–æ–±–∞–≤–ª—è–µ–º –∫ –±–∞–ª–∞–Ω—Å—É –≤–ª–∞–¥–µ–ª—å—Ü–∞
            user_id = farm['user_id']
            earnings[user_id] = earnings.get(user_id, 0) + coins

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤—ã–ø–ª–∞—Ç—ã
            await conn.execute(
                "UPDATE user_farms SET last_paid = $1 WHERE id = $2",
                now, farm['id']
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–∑–æ–º
        for user_id, amount in earnings.items():
            await db.update_balance(conn, user_id, amount)


async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üè™ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–µ—Ä–º—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n"
    for key, farm in FARM_TYPES.items():
        text += f"üîπ *{farm['name']}* ‚Äî {farm['price']} –º–æ–Ω–µ—Ç\n_{farm['description']}_\n\n"
    text += "–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å, –≤–≤–µ–¥–∏: `/buy –Ω–∞–∑–≤–∞–Ω–∏–µ`, –Ω–∞–ø—Ä–∏–º–µ—Ä: `/buy –ø–∞—Å–µ–∫–∞`"
    await update.message.reply_text(text, parse_mode="Markdown")


async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = context.bot_data["db"]
    user_id = update.effective_user.id
    args = context.args

    print(f"ARGS: {context.args}")

    if not args:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–µ—Ä–º—ã. –ü—Ä–∏–º–µ—Ä: /buy –ø–∞—Å–µ–∫–∞")
        return

    farm_key = " ".join(args).strip().lower()
    farm_key = farm_key.replace("üçØ", "").replace("üêì", "").replace("üåæ", "").replace("üêÑ", "").strip()

    if farm_key not in FARM_TYPES:
        await update.message.reply_text(f"–¢–∞–∫–æ–π —Ñ–µ—Ä–º—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: '{farm_key}'. –ü–æ—Å–º–æ—Ç—Ä–∏ –≤ /shop")
        return

    async with pool.acquire() as conn:
        user = await db.get_user(conn, user_id)
        farms = await db.get_farms(conn, user_id)

        if user['balance'] < FARM_TYPES[farm_key]["price"]:
            await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç üí∏")
            return

        if len(farms) >= user['slots']:
            await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ñ–µ—Ä–º—ã.")
            return

        await db.update_balance(conn, user_id, -FARM_TYPES[farm_key]["price"])
        await conn.execute(
            """
            INSERT INTO user_farms (user_id, farm_type, level, crit_level, next_collect, last_paid, active, slot)
            VALUES ($1, $2, 1, 1, NULL, NULL, TRUE, $3)
            """,
            user_id, FARM_TYPES[farm_key]["name"].split()[0], len(farms) + 1
        )

        await update.message.reply_text(f"‚úÖ –¢—ã –∫—É–ø–∏–ª —Ñ–µ—Ä–º—É {FARM_TYPES[farm_key]['name']}!")

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = context.bot_data["db"]
    user_id = update.effective_user.id

    async with pool.acquire() as conn:
        user = await db.get_user(conn, user_id)
        farms = await db.get_farms(conn, user_id)

    await update.message.reply_text(
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']} –º–æ–Ω–µ—Ç\n"
        f"üè° –§–µ—Ä–º—ã: {len(farms)} / {user['slots']} —Å–ª–æ—Ç–æ–≤"
    )
